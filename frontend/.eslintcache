[{"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\index.js":"1","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\store.js":"2","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\App.js":"4","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\reducers\\userReducers.js":"5","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Header.js":"6","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\reducers\\profileReducers.js":"7","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Footer.js":"8","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\LoginScreen.js":"9","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\HomeScreen.js":"10","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\ProfileScreen.js":"11","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\RegisterScreen.js":"12","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\UserEditScreen.js":"13","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\UserListScreen.js":"14","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\MyProfileScreen.js":"15","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Message.js":"16","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Paginate.js":"17","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Loader.js":"18","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\FormContainer.js":"19","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\constants\\userConstants.js":"20","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\constants\\profileConstants.js":"21","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\actions\\profileActions.js":"22","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\actions\\userActions.js":"23","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\FanatikaScreen.js":"24"},{"size":612,"mtime":1668605928969,"results":"25","hashOfConfig":"26"},{"size":1330,"mtime":1668605928974,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1668605928970,"results":"28","hashOfConfig":"26"},{"size":1379,"mtime":1668611588927,"results":"29","hashOfConfig":"26"},{"size":4100,"mtime":1668605928970,"results":"30","hashOfConfig":"26"},{"size":3234,"mtime":1668612923092,"results":"31","hashOfConfig":"26"},{"size":1966,"mtime":1668605928970,"results":"32","hashOfConfig":"26"},{"size":394,"mtime":1668605928965,"results":"33","hashOfConfig":"26"},{"size":2642,"mtime":1668614783668,"results":"34","hashOfConfig":"26"},{"size":2841,"mtime":1668615119594,"results":"35","hashOfConfig":"26"},{"size":4644,"mtime":1668605928972,"results":"36","hashOfConfig":"26"},{"size":4544,"mtime":1668614939465,"results":"37","hashOfConfig":"26"},{"size":4022,"mtime":1668605928973,"results":"38","hashOfConfig":"26"},{"size":3600,"mtime":1668605928973,"results":"39","hashOfConfig":"26"},{"size":4696,"mtime":1668605928972,"results":"40","hashOfConfig":"26"},{"size":240,"mtime":1668605928966,"results":"41","hashOfConfig":"26"},{"size":887,"mtime":1668605928967,"results":"42","hashOfConfig":"26"},{"size":479,"mtime":1668605928966,"results":"43","hashOfConfig":"26"},{"size":394,"mtime":1668605928965,"results":"44","hashOfConfig":"26"},{"size":1512,"mtime":1668605928968,"results":"45","hashOfConfig":"26"},{"size":774,"mtime":1668605928968,"results":"46","hashOfConfig":"26"},{"size":2369,"mtime":1668605928963,"results":"47","hashOfConfig":"26"},{"size":7731,"mtime":1668605928964,"results":"48","hashOfConfig":"26"},{"size":2931,"mtime":1668614278912,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yh9w3z",{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\index.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\store.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\App.js",["109"],"import { Container } from 'react-bootstrap'\r\nimport { HashRouter as Router, Route } from 'react-router-dom'\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer'\r\nimport HomeScreen from './screens/HomeScreen'\r\nimport LoginScreen from './screens/LoginScreen'\r\nimport RegisterScreen from './screens/RegisterScreen'\r\nimport ProfileScreen from './screens/ProfileScreen'\r\nimport UserListScreen from './screens/UserListScreen'\r\nimport UserEditScreen from './screens/UserEditScreen'\r\nimport MyProfileScreen from './screens/MyProfileScreen'\r\nimport FanatikaScreen from './screens/FanatikaScreen'\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <main className=\"py-3\">\r\n        <Container>\r\n          <Route path='/' component={HomeScreen} exact />\r\n          <Route path='/login' component={LoginScreen} />\r\n          <Route path='/register' component={RegisterScreen} />\r\n          <Route path='/fanatika' component={FanatikaScreen} />\r\n          <Route path='/profile' component={ProfileScreen} />\r\n          <Route path='/my/profile' component={MyProfileScreen} />\r\n          <Route path='/admin/userlist' component={UserListScreen} />\r\n          <Route path='/admin/user/:id/edit' component={UserEditScreen} />\r\n\r\n\r\n        </Container>\r\n      </main>\r\n      {/* <Footer /> */}\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Header.js",["110"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { logout } from '../actions/userActions'\r\n\r\nfunction Header() {\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <Navbar  bg=\"dark\" variant=\"dark\" expand=\"lg\"  collapseOnSelect>\r\n                <Container>\r\n                    \r\n                \r\n                    <LinkContainer to='/'>\r\n                        <Navbar.Brand>Fanatika</Navbar.Brand>\r\n                    </LinkContainer>\r\n\r\n\r\n\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n\r\n                        <Nav className=\"ml-auto\">\r\n\r\n                            {userInfo ? (\r\n                                <NavDropdown title={userInfo.name} id='username'>\r\n                                    <LinkContainer to='/profile'>\r\n                                        <NavDropdown.Item>Account Profile</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/my/profile'>\r\n                                        <NavDropdown.Item>My Profile</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                    <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n\r\n                                </NavDropdown>\r\n                            ) : (\r\n                                    <Container>\r\n                                \r\n                                    <LinkContainer to='/fanatika'>\r\n                                    <Nav.Link><i className=\"fas fa-user\"></i>Fanatika Nedir?</Nav.Link>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/login'>\r\n                                        <Nav.Link><i className=\"fas fa-user\"></i>Giriş Yap</Nav.Link>\r\n                                    </LinkContainer>\r\n\r\n                                    <LinkContainer to='/register'>\r\n                                    <Nav.Link><i className=\"fas fa-user\"></i>Kayıt Ol</Nav.Link>\r\n                                    </LinkContainer>\r\n\r\n\r\n                                    </Container>\r\n\r\n                                )}\r\n\r\n\r\n                            {userInfo && userInfo.isAdmin && (\r\n                                <NavDropdown title='Admin' id='adminmenue'>\r\n                                    <LinkContainer to='/admin/userlist'>\r\n                                        <NavDropdown.Item>Users</NavDropdown.Item>\r\n                                    </LinkContainer>\r\n\r\n                                </NavDropdown>\r\n                            )}\r\n\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\reducers\\profileReducers.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\HomeScreen.js",["111","112"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\n\r\n\r\nfunction HomeScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state)\r\n    const { error, loading, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n\r\n    }, [dispatch, keyword])\r\n\r\n    return (\r\n        <div>\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n                    <div>\r\n                        <Row>\r\n                        <h2\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            right: 60,\r\n                            color: \"grey\",\r\n                            top: 500,\r\n                            fontWeight: \"bold\",\r\n                            fontSize: \"35px\",\r\n                            fontFamily: \"Verdana\",\r\n                            textAlign: \"center\",\r\n                            zIndex: 1,\r\n                        }}\r\n                        >\r\n                        Hem Takımını Destekle, Hem Ödülleri Kap\r\n                        <br /> \r\n                        Futbolu Takip Ederken, Eğlen\r\n                        </h2>\r\n                        \r\n                        <Link to=\"/fanatika\">\r\n                        <button style={{position: \"absolute\",\r\n                        right: 450,\r\n                        top: 800,\r\n                        width: \"250px\",\r\n                        height: \"65px\",\r\n                        color: \"white\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"15px\",\r\n                        backgroundColor: \"black\",\r\n                        borderColor: \"red\",}}\r\n                        type=\"button\" class=\"btn btn-info\">Öğrenmeye Başla</button>\r\n                        </Link>\r\n                        \r\n                        \r\n                        \r\n\r\n                        <img \r\n                        style={{position: \"absolute\",\r\n                        left: 250,\r\n                        top: 250,\r\n                        width: \"1000px\",\r\n                        height: \"700px\",}}\r\n                        \r\n                        src=\"./bacground.png\" class=\"img-thumbnail\" alt=\"...\"></img>\r\n                        </Row>\r\n                        <Paginate page={page} pages={pages} keyword={keyword} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\ProfileScreen.js",["113","114","115"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const userDetails = useSelector(state => state.userDetails)\r\n\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n            setMessage('')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\RegisterScreen.js",["116"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [team, setTeam] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Şifre Aynı Değil')\r\n        } else {\r\n            dispatch(register(name, email, team, password))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Kayıt Ol</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>İsim</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='İsim Gir'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Adresi</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Email Gir'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='team'>\r\n                    <Form.Label>Takım</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='team'\r\n                        placeholder='Takımını Gir'\r\n                        value={team}\r\n                        onChange={(e) => setTeam(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Şifre</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Şifre Gir'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Şifre Onay</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Şifreni Tekrar Gir'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Kayıt Ol\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Zaten Hesabın Var Mı? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Giriş Yap\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\UserEditScreen.js",["117"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\UserListScreen.js",["118"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nfunction UserListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Users</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>EMAIL</th>\r\n                                    <th>ADMIN</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\MyProfileScreen.js",["119","120","121"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { USER_UPDATE_MYPROFILE_RESET } from '../constants/profileConstants'\r\nimport { getMyUserDetails,updateMyUserProfile} from '../actions/profileActions'\r\nfunction MyProfileScreen({ history }) {\r\n\r\n    const [bio, setBio] = useState('')\r\n    const [team, setTeam] = useState('')\r\n    const [rating, setRating] = useState('')\r\n    const [birth_date, setBirth_date] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const usermyDetails = useSelector(state => state.usermyDetails)\r\n\r\n    const { error, loading, Myuser } = usermyDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const usermyUpdateProfile = useSelector(state => state.usermyUpdateProfile)\r\n    const {success: successUpdate  } = usermyUpdateProfile\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (!Myuser.team || !Myuser || successUpdate || userInfo._id !== Myuser.id) {\r\n            dispatch({ type: USER_UPDATE_MYPROFILE_RESET })\r\n            dispatch(getMyUserDetails(`profile/${userInfo._id}`))\r\n        } else {\r\n            setTeam(Myuser.team)\r\n            setBio(Myuser.bio)\r\n            setRating(Myuser.rating)\r\n            setBirth_date(Myuser.birth_date)\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, Myuser, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateMyUserProfile({\r\n            'id': Myuser.id,\r\n            'user':Myuser.user,\r\n            'team': team,\r\n            'bio': bio,\r\n            'birth_date': birth_date,\r\n            'rating': rating\r\n        }))\r\n        setMessage('')\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={4}>\r\n                <h2>{userInfo.name} Detail Profile</h2>\r\n\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='team'>\r\n                        <Form.Label>Your Team</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='team'\r\n                            placeholder='Enter your team'\r\n                            value={team}\r\n                            onChange={(e) => setTeam(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='bio'>\r\n                        <Form.Label>Your Bio</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='bio'\r\n                            placeholder='Enter bio'\r\n                            value={bio}\r\n                            onChange={(e) => setBio(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='rating'>\r\n                        <Form.Label>Your rating</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='rating'\r\n                            placeholder='Your Ream'\r\n                            value={rating}\r\n                            onChange={(e) => setRating(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='birth_date'>\r\n                        <Form.Label>Your birth date</Form.Label>\r\n                        <Form.Control\r\n                            type='birth_date'\r\n                            placeholder='change your birth_date'\r\n                            value={birth_date}\r\n                            onChange={(e) => setBirth_date(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default MyProfileScreen\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Message.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\constants\\profileConstants.js",[],"C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\actions\\profileActions.js",["122","123","124","125","126","127"],"import axios from 'axios'\r\nimport {\r\n    USER_MYDETAILS_FAIL,\r\n    USER_MYDETAILS_SUCCESS,\r\n    USER_MYDETAILS_REQUEST,\r\n    USER_MYDETAILS_RESET,\r\n    USER_UPDATE_MYPROFILE_REQUEST,\r\n    USER_UPDATE_MYPROFILE_SUCCESS,\r\n    USER_UPDATE_MYPROFILE_FAIL,\r\n    USER_UPDATE_MYPROFILE_RESET,\r\n    USER_MYLIST_REQUEST,\r\n    USER_MYLIST_SUCCESS,\r\n    USER_MYLIST_FAIL,\r\n    USER_MYLIST_RESET,\r\n} from '../constants/profileConstants'\r\n\r\nexport const getMyUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_MYDETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/my/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_MYDETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_MYDETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateMyUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_MYPROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/my/profile/${user.id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_MYPROFILE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_MYDETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_MYPROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\actions\\userActions.js",["128"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n} from '../constants/userConstants'\r\n\r\nimport {\r\n    USER_MYDETAILS_RESET,\r\n} from '../constants/profileConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n    dispatch({ type: USER_MYDETAILS_RESET })\r\n}\r\n\r\n\r\nexport const register = (name, email,team, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'team': team, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\serge\\OneDrive\\Belgeler\\GitHub\\Team17-backend\\frontend\\src\\screens\\FanatikaScreen.js",["129","130"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\n\r\n\r\n\r\nfunction FanatikaScreen({ history }) {\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state)\r\n    const { error, loading, page, pages } = productList\r\n\r\n    let keyword = history.location.search\r\n\r\n    useEffect(() => {\r\n\r\n    }, [dispatch, keyword])\r\n\r\n    return (\r\n        <div>\r\n            {loading ? <Loader />\r\n                : error ? <Message variant='danger'>{error}</Message>\r\n                    :\r\n                    <div>\r\n                        <Row>\r\n                        <h2\r\n                style={{\r\n                  fontWeight: \"regular\",\r\n                  fontSize: \"25px\",\r\n                  position: \"absolute\",\r\n                  left: 250,\r\n                  top: 200,\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                <p\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    fontSize: \"55px\",\r\n                    color: \"#FA8C16\",\r\n                  }}\r\n                >\r\n                  Fanatika Nedir?\r\n                </p>\r\n                <p\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    fontSize: \"45px\",\r\n                    color: \"#434343\",\r\n                    wordSpacing: 3,\r\n                  }}\r\n                >\r\n                  <br />\r\n                  Taraftarında Futbolun İçinde\r\n                  <br />\r\n                  Olduğu Hem Haber Takip Ederken\r\n                  <br />\r\n                  Hem Oyun Oynadığı Futbol Sitesidir\r\n                </p>\r\n                <p\r\n                  style={{\r\n                    fontWeight: \"regular\",\r\n                    fontSize: \"36px\",\r\n                    color: \"#434343\",\r\n                    wordSpacing: 3,\r\n                  }}\r\n                >\r\n                  Quiz için 15 Soru\r\n                  <br />\r\n                  8 Tanesi Genel Futbol Hakkında \r\n                  <br/>\r\n                  7 Tanesi Senin Takımın Hakkında Olacak\r\n                </p>\r\n\r\n              </h2>\r\n\r\n\r\n              <img \r\n                        style={{position: \"absolute\",\r\n                        right: 100,\r\n                        top: 200,\r\n                        width: \"900px\",\r\n                        height: \"700px\",}}\r\n                        \r\n                        src=\"./logo.png\" class=\"img-thumbnail\" alt=\"...\"></img>\r\n                        </Row>\r\n                        <Paginate page={page} pages={pages} keyword={keyword} />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FanatikaScreen",{"ruleId":"131","severity":1,"message":"132","line":4,"column":8,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"131","severity":1,"message":"135","line":3,"column":34,"nodeType":"133","messageId":"134","endLine":3,"endColumn":37},{"ruleId":"131","severity":1,"message":"136","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"137","line":3,"column":15,"nodeType":"133","messageId":"134","endLine":3,"endColumn":18},{"ruleId":"131","severity":1,"message":"138","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"139","line":3,"column":34,"nodeType":"133","messageId":"134","endLine":3,"endColumn":39},{"ruleId":"131","severity":1,"message":"140","line":4,"column":10,"nodeType":"133","messageId":"134","endLine":4,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":35,"column":22,"nodeType":"143","messageId":"144","endLine":35,"endColumn":24},{"ruleId":"145","severity":1,"message":"146","line":43,"column":8,"nodeType":"147","endLine":43,"endColumn":46,"suggestions":"148"},{"ruleId":"131","severity":1,"message":"136","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"138","line":2,"column":10,"nodeType":"133","messageId":"134","endLine":2,"endColumn":14},{"ruleId":"131","severity":1,"message":"139","line":3,"column":34,"nodeType":"133","messageId":"134","endLine":3,"endColumn":39},{"ruleId":"131","severity":1,"message":"140","line":4,"column":10,"nodeType":"133","messageId":"134","endLine":4,"endColumn":23},{"ruleId":"131","severity":1,"message":"149","line":6,"column":5,"nodeType":"133","messageId":"134","endLine":6,"endColumn":25},{"ruleId":"131","severity":1,"message":"150","line":10,"column":5,"nodeType":"133","messageId":"134","endLine":10,"endColumn":32},{"ruleId":"131","severity":1,"message":"151","line":11,"column":5,"nodeType":"133","messageId":"134","endLine":11,"endColumn":24},{"ruleId":"131","severity":1,"message":"152","line":12,"column":5,"nodeType":"133","messageId":"134","endLine":12,"endColumn":24},{"ruleId":"131","severity":1,"message":"153","line":13,"column":5,"nodeType":"133","messageId":"134","endLine":13,"endColumn":21},{"ruleId":"131","severity":1,"message":"154","line":14,"column":5,"nodeType":"133","messageId":"134","endLine":14,"endColumn":22},{"ruleId":"131","severity":1,"message":"155","line":21,"column":5,"nodeType":"133","messageId":"134","endLine":21,"endColumn":30},{"ruleId":"131","severity":1,"message":"136","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"137","line":3,"column":15,"nodeType":"133","messageId":"134","endLine":3,"endColumn":18},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'useState' is defined but never used.","'Col' is defined but never used.","'Link' is defined but never used.","'Table' is defined but never used.","'LinkContainer' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'USER_MYDETAILS_RESET' is defined but never used.","'USER_UPDATE_MYPROFILE_RESET' is defined but never used.","'USER_MYLIST_REQUEST' is defined but never used.","'USER_MYLIST_SUCCESS' is defined but never used.","'USER_MYLIST_FAIL' is defined but never used.","'USER_MYLIST_RESET' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.",{"desc":"157","fix":"158"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"159","text":"160"},[1474,1512],"[user, userId, successUpdate, history, dispatch]"]